version: '3.8'\n\nservices:\n  # PostgreSQL Database (shared with backend)\n  postgres:\n    image: timescale/timescaledb:latest-pg15\n    container_name: komoditas-postgres\n    environment:\n      POSTGRES_DB: komoditas_watch\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres123\n      POSTGRES_INITDB_ARGS: \"--encoding=UTF-8 --lc-collate=C --lc-ctype=C\"\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql\n    networks:\n      - komoditas-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  # Redis Cache\n  redis:\n    image: redis:7-alpine\n    container_name: komoditas-redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf\n    command: redis-server /usr/local/etc/redis/redis.conf\n    networks:\n      - komoditas-network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 3s\n      retries: 3\n\n  # ML Service\n  ml-service:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: development\n    container_name: komoditas-ml-service\n    environment:\n      - DEBUG=true\n      - ENVIRONMENT=development\n      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/komoditas_watch\n      - REDIS_URL=redis://redis:6379/2\n      - API_HOST=0.0.0.0\n      - API_PORT=8001\n      - LOG_LEVEL=INFO\n      - BACKEND_API_URL=http://backend:3000/api/v1\n    ports:\n      - \"8001:8001\"\n    volumes:\n      - ./data:/app/data\n      - ./logs:/app/logs\n      - ./app:/app/app  # For development hot reload\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    networks:\n      - komoditas-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8001/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    restart: unless-stopped\n\n  # MLflow Tracking Server (optional)\n  mlflow:\n    image: python:3.11-slim\n    container_name: komoditas-mlflow\n    environment:\n      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres123@postgres:5432/komoditas_watch\n      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlruns\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - mlflow_data:/mlruns\n    command: >\n      bash -c \"\n        pip install mlflow psycopg2-binary &&\n        mlflow server \n          --backend-store-uri postgresql://postgres:postgres123@postgres:5432/komoditas_watch \n          --default-artifact-root /mlruns \n          --host 0.0.0.0 \n          --port 5000\n      \"\n    depends_on:\n      postgres:\n        condition: service_healthy\n    networks:\n      - komoditas-network\n    restart: unless-stopped\n\n  # Prometheus (optional - for monitoring)\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: komoditas-prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--web.enable-lifecycle'\n    networks:\n      - komoditas-network\n    profiles:\n      - monitoring\n\n  # Grafana (optional - for visualization)\n  grafana:\n    image: grafana/grafana:latest\n    container_name: komoditas-grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./docker/grafana/provisioning:/etc/grafana/provisioning\n    depends_on:\n      - prometheus\n    networks:\n      - komoditas-network\n    profiles:\n      - monitoring\n\n  # Jupyter Notebook (optional - for development and analysis)\n  jupyter:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: development\n    container_name: komoditas-jupyter\n    environment:\n      - JUPYTER_ENABLE_LAB=yes\n      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/komoditas_watch\n      - REDIS_URL=redis://redis:6379/2\n    ports:\n      - \"8888:8888\"\n    volumes:\n      - ./notebooks:/app/notebooks\n      - ./data:/app/data\n      - ./app:/app/app\n    command: >\n      bash -c \"\n        pip install jupyter jupyterlab &&\n        jupyter lab \n          --ip=0.0.0.0 \n          --port=8888 \n          --no-browser \n          --allow-root \n          --NotebookApp.token='' \n          --NotebookApp.password=''\n      \"\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    networks:\n      - komoditas-network\n    profiles:\n      - development\n\nvolumes:\n  postgres_data:\n    driver: local\n  redis_data:\n    driver: local\n  mlflow_data:\n    driver: local\n  prometheus_data:\n    driver: local\n  grafana_data:\n    driver: local\n\nnetworks:\n  komoditas-network:\n    driver: bridge\n    external: false\n