-- PostgreSQL initialization script untuk ML service\n-- Script ini akan dijalankan saat container pertama kali dibuat\n\n-- Create TimescaleDB extension\nCREATE EXTENSION IF NOT EXISTS timescaledb;\n\n-- Create database user untuk ML service (optional)\n-- CREATE USER ml_service WITH PASSWORD 'ml_service_password';\n-- GRANT ALL PRIVILEGES ON DATABASE komoditas_watch TO ml_service;\n\n-- Create schema for ML-specific tables (optional)\nCREATE SCHEMA IF NOT EXISTS ml_data;\n\n-- Create table for ML model metadata\nCREATE TABLE IF NOT EXISTS ml_data.model_metadata (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(255) NOT NULL,\n    model_type VARCHAR(50) NOT NULL,\n    commodity_code VARCHAR(20),\n    region_code VARCHAR(10),\n    version VARCHAR(50),\n    file_path TEXT,\n    training_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    metrics JSONB,\n    hyperparameters JSONB,\n    status VARCHAR(20) DEFAULT 'active',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create table for prediction logs\nCREATE TABLE IF NOT EXISTS ml_data.prediction_logs (\n    id SERIAL PRIMARY KEY,\n    request_id VARCHAR(255),\n    commodity_code VARCHAR(20),\n    region_code VARCHAR(10),\n    model_type VARCHAR(50),\n    prediction_date TIMESTAMP,\n    horizon_days INTEGER,\n    predicted_values JSONB,\n    actual_values JSONB,\n    confidence_scores JSONB,\n    latency_ms FLOAT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create hypertable for prediction logs (TimescaleDB)\nSELECT create_hypertable('ml_data.prediction_logs', 'created_at', if_not_exists => TRUE);\n\n-- Create table for anomaly detection logs\nCREATE TABLE IF NOT EXISTS ml_data.anomaly_logs (\n    id SERIAL PRIMARY KEY,\n    commodity_code VARCHAR(20),\n    region_code VARCHAR(10),\n    detection_date TIMESTAMP,\n    anomaly_type VARCHAR(50),\n    anomaly_score FLOAT,\n    severity VARCHAR(20),\n    description TEXT,\n    actual_price DECIMAL(12,2),\n    expected_price DECIMAL(12,2),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create hypertable for anomaly logs (TimescaleDB)\nSELECT create_hypertable('ml_data.anomaly_logs', 'created_at', if_not_exists => TRUE);\n\n-- Create table for model performance metrics\nCREATE TABLE IF NOT EXISTS ml_data.model_performance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(255),\n    commodity_code VARCHAR(20),\n    region_code VARCHAR(10),\n    evaluation_date TIMESTAMP,\n    mae FLOAT,\n    rmse FLOAT,\n    mape FLOAT,\n    r2_score FLOAT,\n    prediction_count INTEGER,\n    evaluation_period_days INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create hypertable for model performance (TimescaleDB)\nSELECT create_hypertable('ml_data.model_performance', 'created_at', if_not_exists => TRUE);\n\n-- Create table for feature importance\nCREATE TABLE IF NOT EXISTS ml_data.feature_importance (\n    id SERIAL PRIMARY KEY,\n    model_name VARCHAR(255),\n    commodity_code VARCHAR(20),\n    feature_name VARCHAR(255),\n    importance_score FLOAT,\n    feature_type VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create indexes for better query performance\nCREATE INDEX IF NOT EXISTS idx_model_metadata_commodity ON ml_data.model_metadata(commodity_code);\nCREATE INDEX IF NOT EXISTS idx_model_metadata_type ON ml_data.model_metadata(model_type);\nCREATE INDEX IF NOT EXISTS idx_model_metadata_status ON ml_data.model_metadata(status);\n\nCREATE INDEX IF NOT EXISTS idx_prediction_logs_commodity ON ml_data.prediction_logs(commodity_code);\nCREATE INDEX IF NOT EXISTS idx_prediction_logs_region ON ml_data.prediction_logs(region_code);\nCREATE INDEX IF NOT EXISTS idx_prediction_logs_date ON ml_data.prediction_logs(prediction_date);\n\nCREATE INDEX IF NOT EXISTS idx_anomaly_logs_commodity ON ml_data.anomaly_logs(commodity_code);\nCREATE INDEX IF NOT EXISTS idx_anomaly_logs_region ON ml_data.anomaly_logs(region_code);\nCREATE INDEX IF NOT EXISTS idx_anomaly_logs_type ON ml_data.anomaly_logs(anomaly_type);\n\nCREATE INDEX IF NOT EXISTS idx_model_performance_model ON ml_data.model_performance(model_name);\nCREATE INDEX IF NOT EXISTS idx_model_performance_commodity ON ml_data.model_performance(commodity_code);\n\nCREATE INDEX IF NOT EXISTS idx_feature_importance_model ON ml_data.feature_importance(model_name);\nCREATE INDEX IF NOT EXISTS idx_feature_importance_feature ON ml_data.feature_importance(feature_name);\n\n-- Grant permissions\nGRANT USAGE ON SCHEMA ml_data TO PUBLIC;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA ml_data TO PUBLIC;\nGRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA ml_data TO PUBLIC;\n\n-- Create continuous aggregates for analytics (TimescaleDB)\n-- Daily prediction accuracy\nCREATE MATERIALIZED VIEW IF NOT EXISTS ml_data.daily_prediction_accuracy\nWITH (timescaledb.continuous) AS\nSELECT \n    time_bucket('1 day', created_at) AS day,\n    commodity_code,\n    model_type,\n    COUNT(*) as prediction_count,\n    AVG(latency_ms) as avg_latency_ms\nFROM ml_data.prediction_logs\nGROUP BY day, commodity_code, model_type\nWITH NO DATA;\n\n-- Daily anomaly summary\nCREATE MATERIALIZED VIEW IF NOT EXISTS ml_data.daily_anomaly_summary\nWITH (timescaledb.continuous) AS\nSELECT \n    time_bucket('1 day', created_at) AS day,\n    commodity_code,\n    anomaly_type,\n    COUNT(*) as anomaly_count,\n    AVG(anomaly_score) as avg_anomaly_score\nFROM ml_data.anomaly_logs\nGROUP BY day, commodity_code, anomaly_type\nWITH NO DATA;\n\n-- Enable continuous aggregate policies\nSELECT add_continuous_aggregate_policy('ml_data.daily_prediction_accuracy',\n    start_offset => INTERVAL '1 month',\n    end_offset => INTERVAL '1 hour',\n    schedule_interval => INTERVAL '1 hour',\n    if_not_exists => TRUE);\n\nSELECT add_continuous_aggregate_policy('ml_data.daily_anomaly_summary',\n    start_offset => INTERVAL '1 month',\n    end_offset => INTERVAL '1 hour',\n    schedule_interval => INTERVAL '1 hour',\n    if_not_exists => TRUE);\n\n-- Create retention policies\nSELECT add_retention_policy('ml_data.prediction_logs', INTERVAL '1 year', if_not_exists => TRUE);\nSELECT add_retention_policy('ml_data.anomaly_logs', INTERVAL '2 years', if_not_exists => TRUE);\nSELECT add_retention_policy('ml_data.model_performance', INTERVAL '2 years', if_not_exists => TRUE);\n\n-- Insert sample data for testing (optional)\n-- INSERT INTO ml_data.model_metadata (model_name, model_type, commodity_code, version, status) \n-- VALUES ('prophet_beras_national', 'prophet', 'BERAS', '1.0.0', 'active');\n\nCOMMIT;\n