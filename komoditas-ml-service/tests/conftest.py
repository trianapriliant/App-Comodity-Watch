"""Test configuration dan fixtures untuk ML service tests."""

import asyncio
import pytest\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom typing import Generator, AsyncGenerator\n\n# Test fixtures\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"Create an instance of the default event loop for the test session.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n\n\n@pytest.fixture\ndef sample_price_data() -> pd.DataFrame:\n    \"\"\"Sample price data for testing.\"\"\"\n    dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')\n    np.random.seed(42)\n    \n    data = []\n    for date in dates:\n        # Generate price with trend and seasonality\n        day_of_year = date.timetuple().tm_yday\n        trend = 12000 + (day_of_year * 5)  # Increasing trend\n        seasonal = 500 * np.sin(2 * np.pi * day_of_year / 365)  # Yearly seasonality\n        noise = np.random.normal(0, 200)  # Random noise\n        price = trend + seasonal + noise\n        \n        data.append({\n            'date': date,\n            'commodity_code': 'BERAS',\n            'region_code': '31',\n            'commodity_name': 'Beras',\n            'region_name': 'DKI Jakarta',\n            'price': max(price, 8000),  # Minimum price\n            'currency': 'IDR',\n            'price_type': 'KONSUMEN',\n            'source': 'TEST'\n        })\n    \n    return pd.DataFrame(data)\n\n\n@pytest.fixture\ndef sample_weather_data() -> pd.DataFrame:\n    \"\"\"Sample weather data for testing.\"\"\"\n    dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')\n    np.random.seed(42)\n    \n    data = []\n    for date in dates:\n        day_of_year = date.timetuple().tm_yday\n        \n        # Temperature (tropical pattern)\n        temp = 27 + 3 * np.sin(2 * np.pi * day_of_year / 365) + np.random.normal(0, 2)\n        \n        # Rainfall (wet/dry season)\n        rainfall_base = 5 if (day_of_year >= 300 or day_of_year <= 90) else 1\n        rainfall = np.random.exponential(rainfall_base)\n        \n        # Humidity\n        humidity = 70 + 10 * np.sin(2 * np.pi * day_of_year / 365) + np.random.normal(0, 5)\n        \n        for weather_type, value in [('TEMPERATURE', temp), ('RAINFALL', rainfall), ('HUMIDITY', humidity)]:\n            data.append({\n                'date': date,\n                'region_code': '31',\n                'region_name': 'DKI Jakarta',\n                'weather_type': weather_type,\n                'value': max(value, 0),\n                'unit': 'Â°C' if weather_type == 'TEMPERATURE' else ('mm' if weather_type == 'RAINFALL' else '%'),\n                'source': 'TEST'\n            })\n    \n    return pd.DataFrame(data)\n\n\n@pytest.fixture\ndef sample_features_data(sample_price_data: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Sample engineered features data for testing.\"\"\"\n    df = sample_price_data.copy()\n    \n    # Add some basic features\n    df['price_ma_7'] = df['price'].rolling(7).mean()\n    df['price_ma_30'] = df['price'].rolling(30).mean()\n    df['price_pct_change'] = df['price'].pct_change()\n    df['volatility_7d'] = df['price_pct_change'].rolling(7).std()\n    \n    # Add seasonal features\n    df['month'] = df['date'].dt.month\n    df['day_of_week'] = df['date'].dt.dayofweek\n    df['is_weekend'] = (df['day_of_week'] >= 5).astype(int)\n    \n    return df.dropna()\n\n\n@pytest.fixture\ndef mock_prediction_request() -> dict:\n    \"\"\"Mock prediction request for testing.\"\"\"\n    return {\n        \"commodity_code\": \"BERAS\",\n        \"region_code\": \"31\",\n        \"horizon_days\": 7,\n        \"model_type\": \"prophet\",\n        \"include_uncertainty\": True,\n        \"include_features\": False\n    }\n\n\n@pytest.fixture\ndef mock_anomaly_request() -> dict:\n    \"\"\"Mock anomaly detection request for testing.\"\"\"\n    return {\n        \"commodity_code\": \"BERAS\",\n        \"region_code\": \"31\",\n        \"detection_type\": \"both\",\n        \"sensitivity\": 0.1,\n        \"time_window_days\": 30\n    }\n\n\n@pytest.fixture\ndef mock_batch_request(mock_prediction_request: dict) -> dict:\n    \"\"\"Mock batch prediction request for testing.\"\"\"\n    return {\n        \"requests\": [\n            mock_prediction_request,\n            {\n                **mock_prediction_request,\n                \"commodity_code\": \"JAGUNG\",\n                \"horizon_days\": 14\n            }\n        ]\n    }\n\n\n@pytest.fixture\ndef mock_correlation_request() -> dict:\n    \"\"\"Mock correlation analysis request for testing.\"\"\"\n    return {\n        \"commodity_code\": \"BERAS\",\n        \"region_codes\": [\"31\"],\n        \"weather_types\": [\"TEMPERATURE\", \"RAINFALL\"],\n        \"time_window_days\": 365,\n        \"correlation_method\": \"pearson\"\n    }\n\n\n# Test markers\npytestmark = pytest.mark.asyncio\n