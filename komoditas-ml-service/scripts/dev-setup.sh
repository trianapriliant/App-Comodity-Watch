#!/bin/bash\n# Development setup script untuk Komoditas ML Service\n\nset -e\n\necho \"ðŸš€ Setting up Komoditas ML Service development environment...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Check if Docker is installed\nif ! command -v docker &> /dev/null; then\n    print_error \"Docker is not installed. Please install Docker first.\"\n    exit 1\nfi\n\n# Check if Docker Compose is installed\nif ! command -v docker-compose &> /dev/null; then\n    print_error \"Docker Compose is not installed. Please install Docker Compose first.\"\n    exit 1\nfi\n\nprint_success \"Docker and Docker Compose are installed\"\n\n# Create necessary directories\nprint_status \"Creating necessary directories...\"\nmkdir -p data/{models,artifacts,features,raw,processed}\nmkdir -p logs\nmkdir -p notebooks\nmkdir -p tests/{unit,integration,load}\nmkdir -p docker/{prometheus,grafana/provisioning/{dashboards,datasources}}\n\n# Create .gitkeep files\ntouch data/models/.gitkeep\ntouch data/artifacts/.gitkeep\ntouch data/features/.gitkeep\ntouch data/raw/.gitkeep\ntouch data/processed/.gitkeep\ntouch logs/.gitkeep\n\nprint_success \"Directories created\"\n\n# Copy environment file if it doesn't exist\nif [ ! -f .env ]; then\n    print_status \"Creating .env file from template...\"\n    cp .env.example .env\n    print_warning \"Please edit .env file with your configuration\"\nelse\n    print_status \".env file already exists\"\nfi\n\n# Install Python dependencies (if running locally)\nif [ \"$1\" = \"--local\" ]; then\n    print_status \"Installing Python dependencies...\"\n    \n    # Check if Python 3.11+ is available\n    if command -v python3.11 &> /dev/null; then\n        PYTHON_CMD=python3.11\n    elif command -v python3 &> /dev/null; then\n        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)\n        if [ \"$(echo \"$PYTHON_VERSION >= 3.11\" | bc)\" -eq 1 ] 2>/dev/null; then\n            PYTHON_CMD=python3\n        else\n            print_error \"Python 3.11+ is required. Current version: $PYTHON_VERSION\"\n            exit 1\n        fi\n    else\n        print_error \"Python 3.11+ is not installed\"\n        exit 1\n    fi\n    \n    # Create virtual environment\n    if [ ! -d \".venv\" ]; then\n        print_status \"Creating virtual environment...\"\n        $PYTHON_CMD -m venv .venv\n    fi\n    \n    # Activate virtual environment\n    source .venv/bin/activate\n    \n    # Upgrade pip\n    pip install --upgrade pip\n    \n    # Install dependencies\n    pip install -r requirements.txt\n    \n    print_success \"Python dependencies installed\"\nfi\n\n# Start Docker services\nprint_status \"Starting Docker services...\"\n\n# Pull latest images\ndocker-compose pull\n\n# Build ML service image\ndocker-compose build ml-service\n\n# Start core services (postgres, redis)\nprint_status \"Starting core services (PostgreSQL, Redis)...\"\ndocker-compose up -d postgres redis\n\n# Wait for services to be ready\nprint_status \"Waiting for services to be ready...\"\nsleep 10\n\n# Check if services are healthy\nprint_status \"Checking service health...\"\nmax_attempts=30\nattempt=1\n\nwhile [ $attempt -le $max_attempts ]; do\n    if docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then\n        print_success \"PostgreSQL is ready\"\n        break\n    fi\n    print_status \"Waiting for PostgreSQL... ($attempt/$max_attempts)\"\n    sleep 2\n    attempt=$((attempt + 1))\ndone\n\nif [ $attempt -gt $max_attempts ]; then\n    print_error \"PostgreSQL failed to start\"\n    exit 1\nfi\n\n# Check Redis\nattempt=1\nwhile [ $attempt -le $max_attempts ]; do\n    if docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then\n        print_success \"Redis is ready\"\n        break\n    fi\n    print_status \"Waiting for Redis... ($attempt/$max_attempts)\"\n    sleep 2\n    attempt=$((attempt + 1))\ndone\n\nif [ $attempt -gt $max_attempts ]; then\n    print_error \"Redis failed to start\"\n    exit 1\nfi\n\n# Start ML service\nprint_status \"Starting ML service...\"\ndocker-compose up -d ml-service\n\n# Wait for ML service to be ready\nprint_status \"Waiting for ML service to be ready...\"\nsleep 15\n\nattempt=1\nwhile [ $attempt -le $max_attempts ]; do\n    if curl -f http://localhost:8001/health > /dev/null 2>&1; then\n        print_success \"ML service is ready\"\n        break\n    fi\n    print_status \"Waiting for ML service... ($attempt/$max_attempts)\"\n    sleep 3\n    attempt=$((attempt + 1))\ndone\n\nif [ $attempt -gt $max_attempts ]; then\n    print_warning \"ML service may not be ready yet. Check logs with: docker-compose logs ml-service\"\nfi\n\n# Optional services\nif [ \"$1\" = \"--with-monitoring\" ]; then\n    print_status \"Starting monitoring services...\"\n    docker-compose --profile monitoring up -d\n    print_success \"Monitoring services started\"\n    echo \"  - Prometheus: http://localhost:9090\"\n    echo \"  - Grafana: http://localhost:3001 (admin/admin123)\"\nfi\n\nif [ \"$1\" = \"--with-jupyter\" ]; then\n    print_status \"Starting Jupyter notebook...\"\n    docker-compose --profile development up -d jupyter\n    print_success \"Jupyter notebook started\"\n    echo \"  - Jupyter: http://localhost:8888\"\nfi\n\n# Show service status\nprint_status \"Service status:\"\ndocker-compose ps\n\n# Show useful URLs\necho \"\"\nprint_success \"Development environment is ready! ðŸŽ‰\"\necho \"\"\necho \"ðŸ”— Useful URLs:\"\necho \"  - ML Service API: http://localhost:8001\"\necho \"  - API Documentation: http://localhost:8001/docs\"\necho \"  - Health Check: http://localhost:8001/health\"\necho \"  - MLflow (if started): http://localhost:5000\"\necho \"\"\necho \"ðŸ“‹ Next steps:\"\necho \"  1. Check service health: curl http://localhost:8001/health\"\necho \"  2. View API docs: open http://localhost:8001/docs\"\necho \"  3. Check logs: docker-compose logs -f ml-service\"\necho \"  4. Run tests: docker-compose exec ml-service pytest\"\necho \"\"\necho \"ðŸ’¡ Development commands:\"\necho \"  - Start all services: docker-compose up -d\"\necho \"  - Stop all services: docker-compose down\"\necho \"  - View logs: docker-compose logs -f [service-name]\"\necho \"  - Rebuild service: docker-compose build [service-name]\"\necho \"  - Shell access: docker-compose exec ml-service bash\"\necho \"\"\n\nprint_success \"Setup completed successfully!\"\n