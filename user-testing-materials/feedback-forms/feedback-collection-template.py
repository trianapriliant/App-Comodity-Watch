#!/usr/bin/env python3\n\"\"\"\nGenerate Excel Template untuk User Testing Feedback Collection\nMembuat template yang mudah digunakan dan dianalisis\n\"\"\"\n\nimport pandas as pd\nimport xlsxwriter\nfrom datetime import datetime\nimport os\n\nclass FeedbackTemplateGenerator:\n    \"\"\"Generator untuk Excel template feedback collection.\"\"\"\n    \n    def __init__(self):\n        self.output_dir = '/workspace/user-testing-materials/feedback-forms'\n        os.makedirs(self.output_dir, exist_ok=True)\n    \n    def create_feedback_template(self):\n        \"\"\"Create comprehensive Excel template untuk feedback collection.\"\"\"\n        \n        filename = f\"{self.output_dir}/user_testing_feedback_template.xlsx\"\n        \n        # Create workbook dan worksheets\n        workbook = xlsxwriter.Workbook(filename)\n        \n        # Define formats\n        header_format = workbook.add_format({\n            'bold': True,\n            'bg_color': '#4472C4',\n            'font_color': 'white',\n            'border': 1,\n            'align': 'center',\n            'valign': 'vcenter'\n        })\n        \n        subheader_format = workbook.add_format({\n            'bold': True,\n            'bg_color': '#D9E1F2',\n            'border': 1,\n            'align': 'left',\n            'valign': 'vcenter'\n        })\n        \n        data_format = workbook.add_format({\n            'border': 1,\n            'align': 'left',\n            'valign': 'top',\n            'text_wrap': True\n        })\n        \n        rating_format = workbook.add_format({\n            'border': 1,\n            'align': 'center',\n            'valign': 'vcenter'\n        })\n        \n        # Create worksheets\n        self._create_individual_feedback_sheet(workbook, header_format, subheader_format, data_format, rating_format)\n        self._create_summary_analysis_sheet(workbook, header_format, subheader_format, data_format)\n        self._create_scoring_guide_sheet(workbook, header_format, subheader_format, data_format)\n        \n        workbook.close()\n        print(f\"✅ Feedback template created: {filename}\")\n        return filename\n    \n    def _create_individual_feedback_sheet(self, workbook, header_format, subheader_format, data_format, rating_format):\n        \"\"\"Create sheet untuk individual participant feedback.\"\"\"\n        \n        worksheet = workbook.add_worksheet('Individual Feedback')\n        \n        # Set column widths\n        worksheet.set_column('A:A', 25)  # Questions\n        worksheet.set_column('B:B', 15)  # Response Type\n        worksheet.set_column('C:C', 20)  # Response\n        worksheet.set_column('D:D', 30)  # Comments\n        worksheet.set_column('E:E', 15)  # Facilitator Notes\n        \n        row = 0\n        \n        # Title\n        worksheet.merge_range(row, 0, row, 4, 'USER TESTING FEEDBACK FORM - KOMODITAS WATCH', header_format)\n        row += 2\n        \n        # Session Info\n        worksheet.write(row, 0, 'SESSION INFORMATION', subheader_format)\n        worksheet.write(row, 1, '', subheader_format)\n        worksheet.write(row, 2, '', subheader_format)\n        worksheet.write(row, 3, '', subheader_format)\n        worksheet.write(row, 4, '', subheader_format)\n        row += 1\n        \n        session_info = [\n            ('Session ID', 'Text', '', ''),\n            ('Date', 'Date', '', ''),\n            ('Start Time', 'Time', '', ''),\n            ('End Time', 'Time', '', ''),\n            ('Facilitator', 'Text', '', ''),\n            ('Participant Name (Optional)', 'Text', '', ''),\n            ('Stakeholder Type', 'Dropdown', 'Petani/Distributor/Regulator', ''),\n            ('Location/Province', 'Text', '', ''),\n            ('Tech Experience Level', 'Dropdown', 'Pemula/Menengah/Mahir', ''),\n        ]\n        \n        for item, resp_type, response, comment in session_info:\n            worksheet.write(row, 0, item, data_format)\n            worksheet.write(row, 1, resp_type, data_format)\n            worksheet.write(row, 2, response, data_format)\n            worksheet.write(row, 3, comment, data_format)\n            worksheet.write(row, 4, '', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Usability Assessment\n        worksheet.write(row, 0, 'USABILITY ASSESSMENT (1-5 Scale)', subheader_format)\n        worksheet.write(row, 1, 'Rating', subheader_format)\n        worksheet.write(row, 2, 'Score', subheader_format)\n        worksheet.write(row, 3, 'Comments', subheader_format)\n        worksheet.write(row, 4, 'Observer Notes', subheader_format)\n        row += 1\n        \n        usability_questions = [\n            'Navigation - Finding information',\n            'Navigation - Moving between pages',\n            'Navigation - Understanding menu structure',\n            'Performance - Page loading speed',\n            'Design - Visual appearance',\n            'Design - Text clarity',\n            'Design - Button/element size',\n            'Design - Mobile responsiveness',\n        ]\n        \n        for question in usability_questions:\n            worksheet.write(row, 0, question, data_format)\n            worksheet.write(row, 1, '1-5', rating_format)\n            worksheet.write(row, 2, '', rating_format)\n            worksheet.write(row, 3, '', data_format)\n            worksheet.write(row, 4, '', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Feature-Specific Feedback\n        worksheet.write(row, 0, 'FEATURE-SPECIFIC FEEDBACK', subheader_format)\n        worksheet.write(row, 1, 'Type', subheader_format)\n        worksheet.write(row, 2, 'Response', subheader_format)\n        worksheet.write(row, 3, 'Details', subheader_format)\n        worksheet.write(row, 4, 'Observer Notes', subheader_format)\n        row += 1\n        \n        feature_questions = [\n            ('Dashboard suitability for needs', 'Rating 1-5', '', 'What was most/least useful?'),\n            ('Prediction accuracy perception', 'Rating 1-5', '', 'Trust level in predictions'),\n            ('Chart visualization clarity', 'Rating 1-5', '', 'Easy to understand?'),\n            ('Decision making usefulness', 'Rating 1-5', '', 'Would use for real decisions?'),\n            ('Confidence interval understanding', 'Rating 1-5', '', 'Clear meaning?'),\n            ('Preferred prediction horizon', 'Dropdown', '1-3 days/1 week/2 weeks/1 month/3 months', 'Most useful timeframe'),\n            ('Regional heatmap clarity', 'Rating 1-5', '', 'Easy to interpret colors?'),\n            ('Weather correlation usefulness', 'Rating 1-5', '', 'Relevant for decisions?'),\n            ('Most useful weather data', 'Checkbox', 'Rainfall/Temperature/Humidity/Wind', 'Primary factors'),\n        ]\n        \n        for question, resp_type, response, details in feature_questions:\n            worksheet.write(row, 0, question, data_format)\n            worksheet.write(row, 1, resp_type, data_format)\n            worksheet.write(row, 2, response, data_format)\n            worksheet.write(row, 3, details, data_format)\n            worksheet.write(row, 4, '', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Task Completion Assessment\n        worksheet.write(row, 0, 'TASK COMPLETION ASSESSMENT', subheader_format)\n        worksheet.write(row, 1, 'Completed?', subheader_format)\n        worksheet.write(row, 2, 'Difficulty', subheader_format)\n        worksheet.write(row, 3, 'Time (min)', subheader_format)\n        worksheet.write(row, 4, 'Issues Encountered', subheader_format)\n        row += 1\n        \n        task_questions = [\n            'Task 1: [Specific task given]',\n            'Task 2: [Specific task given]',\n            'Task 3: [Specific task given]',\n            'Overall task completion',\n        ]\n        \n        for task in task_questions:\n            worksheet.write(row, 0, task, data_format)\n            worksheet.write(row, 1, 'Yes/Partial/No', data_format)\n            worksheet.write(row, 2, '1-5 Scale', rating_format)\n            worksheet.write(row, 3, '', rating_format)\n            worksheet.write(row, 4, '', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Value Proposition\n        worksheet.write(row, 0, 'VALUE PROPOSITION ASSESSMENT', subheader_format)\n        worksheet.write(row, 1, 'Type', subheader_format)\n        worksheet.write(row, 2, 'Response', subheader_format)\n        worksheet.write(row, 3, 'Explanation', subheader_format)\n        worksheet.write(row, 4, 'Observer Notes', subheader_format)\n        row += 1\n        \n        value_questions = [\n            ('Platform helpfulness for work/business', 'Rating 1-5', '', 'How specifically helpful?'),\n            ('Biggest benefit perceived', 'Open text', '', 'Most valuable aspect'),\n            ('Areas needing improvement', 'Open text', '', 'Priority improvements'),\n            ('Willingness to pay (monthly)', 'Dropdown', 'Free/25-50k/50-100k/100-250k/>250k', 'Value perception'),\n            ('Factors influencing subscription', 'Checkbox', 'Accuracy/Completeness/Speed/Support/Integration', 'Decision drivers'),\n            ('Net Promoter Score', 'Rating 0-10', '', 'Likelihood to recommend'),\n            ('Three words describing platform', 'Open text', '', 'Overall impression'),\n        ]\n        \n        for question, resp_type, response, explanation in value_questions:\n            worksheet.write(row, 0, question, data_format)\n            worksheet.write(row, 1, resp_type, data_format)\n            worksheet.write(row, 2, response, data_format)\n            worksheet.write(row, 3, explanation, data_format)\n            worksheet.write(row, 4, '', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Technical Performance\n        worksheet.write(row, 0, 'TECHNICAL PERFORMANCE', subheader_format)\n        worksheet.write(row, 1, 'Rating', subheader_format)\n        worksheet.write(row, 2, 'Score', subheader_format)\n        worksheet.write(row, 3, 'Issues/Bugs Found', subheader_format)\n        worksheet.write(row, 4, 'Severity', subheader_format)\n        row += 1\n        \n        tech_questions = [\n            'Loading speed',\n            'System stability',\n            'Device compatibility',\n            'Data accuracy',\n        ]\n        \n        for question in tech_questions:\n            worksheet.write(row, 0, question, data_format)\n            worksheet.write(row, 1, '1-5', rating_format)\n            worksheet.write(row, 2, '', rating_format)\n            worksheet.write(row, 3, '', data_format)\n            worksheet.write(row, 4, 'Low/Med/High', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Feature Prioritization\n        worksheet.write(row, 0, 'FEATURE PRIORITIZATION (Rank 1-8)', subheader_format)\n        worksheet.write(row, 1, 'Ranking', subheader_format)\n        worksheet.write(row, 2, 'Importance', subheader_format)\n        worksheet.write(row, 3, 'Why Important/Not Important', subheader_format)\n        worksheet.write(row, 4, '', subheader_format)\n        row += 1\n        \n        features = [\n            'Dashboard real-time prices',\n            'Price predictions 7-30 days',\n            'Regional price distribution',\n            'Weather correlation analysis',\n            'Alert system (price spikes)',\n            'Data input contribution',\n            'Reports & data export',\n            'Mobile app version',\n        ]\n        \n        for feature in features:\n            worksheet.write(row, 0, feature, data_format)\n            worksheet.write(row, 1, '1-8', rating_format)\n            worksheet.write(row, 2, 'High/Med/Low', data_format)\n            worksheet.write(row, 3, '', data_format)\n            worksheet.write(row, 4, '', data_format)\n            row += 1\n        \n        row += 1\n        \n        # Open Feedback\n        worksheet.write(row, 0, 'OPEN FEEDBACK', subheader_format)\n        worksheet.write(row, 1, '', subheader_format)\n        worksheet.write(row, 2, '', subheader_format)\n        worksheet.write(row, 3, '', subheader_format)\n        worksheet.write(row, 4, '', subheader_format)\n        row += 1\n        \n        open_questions = [\n            'Missing features needed',\n            'Overall impression',\n            'Suggestions for improvement',\n            'Would you use this daily?',\n            'Other comments',\n        ]\n        \n        for question in open_questions:\n            worksheet.write(row, 0, question, data_format)\n            worksheet.write(row, 1, 'Open text', data_format)\n            worksheet.write(row, 2, '', data_format)\n            worksheet.write(row, 3, '', data_format)\n            worksheet.write(row, 4, '', data_format)\n            # Increase row height for open text\n            worksheet.set_row(row, 30)\n            row += 1\n    \n    def _create_summary_analysis_sheet(self, workbook, header_format, subheader_format, data_format):\n        \"\"\"Create sheet untuk summary analysis across all participants.\"\"\"\n        \n        worksheet = workbook.add_worksheet('Summary Analysis')\n        \n        # Set column widths\n        worksheet.set_column('A:A', 30)\n        worksheet.set_column('B:F', 12)\n        worksheet.set_column('G:G', 20)\n        \n        row = 0\n        \n        # Title\n        worksheet.merge_range(row, 0, row, 6, 'USER TESTING SUMMARY ANALYSIS', header_format)\n        row += 2\n        \n        # Summary stats\n        worksheet.write(row, 0, 'SUMMARY STATISTICS', subheader_format)\n        worksheet.write(row, 1, 'Total', subheader_format)\n        worksheet.write(row, 2, 'Petani', subheader_format)\n        worksheet.write(row, 3, 'Distributor', subheader_format)\n        worksheet.write(row, 4, 'Regulator', subheader_format)\n        worksheet.write(row, 5, 'Target', subheader_format)\n        worksheet.write(row, 6, 'Notes', subheader_format)\n        row += 1\n        \n        summary_metrics = [\n            ('Total Participants', '', '', '', '', '15-20', ''),\n            ('Completion Rate %', '', '', '', '', '>85%', ''),\n            ('Avg Session Duration (min)', '', '', '', '', '60-90', ''),\n            ('Avg Overall Rating', '', '', '', '', '>4.0', ''),\n            ('Net Promoter Score', '', '', '', '', '>8.0', ''),\n            ('Would Recommend %', '', '', '', '', '>80%', ''),\n            ('Willing to Pay %', '', '', '', '', '>60%', ''),\n        ]\n        \n        for metric, total, petani, dist, reg, target, notes in summary_metrics:\n            worksheet.write(row, 0, metric, data_format)\n            worksheet.write(row, 1, total, data_format)\n            worksheet.write(row, 2, petani, data_format)\n            worksheet.write(row, 3, dist, data_format)\n            worksheet.write(row, 4, reg, data_format)\n            worksheet.write(row, 5, target, data_format)\n            worksheet.write(row, 6, notes, data_format)\n            row += 1\n        \n        row += 1\n        \n        # Usability metrics\n        worksheet.write(row, 0, 'USABILITY METRICS (Avg Rating 1-5)', subheader_format)\n        worksheet.write(row, 1, 'Overall', subheader_format)\n        worksheet.write(row, 2, 'Petani', subheader_format)\n        worksheet.write(row, 3, 'Distributor', subheader_format)\n        worksheet.write(row, 4, 'Regulator', subheader_format)\n        worksheet.write(row, 5, 'Target', subheader_format)\n        worksheet.write(row, 6, 'Gap Analysis', subheader_format)\n        row += 1\n        \n        usability_metrics = [\n            ('Navigation - Finding info', '', '', '', '', '>4.0', ''),\n            ('Navigation - Between pages', '', '', '', '', '>4.0', ''),\n            ('Performance - Loading speed', '', '', '', '', '>3.5', ''),\n            ('Design - Visual appeal', '', '', '', '', '>3.5', ''),\n            ('Design - Text clarity', '', '', '', '', '>4.0', ''),\n            ('Mobile responsiveness', '', '', '', '', '>3.5', ''),\n        ]\n        \n        for metric, overall, petani, dist, reg, target, gap in usability_metrics:\n            worksheet.write(row, 0, metric, data_format)\n            worksheet.write(row, 1, overall, data_format)\n            worksheet.write(row, 2, petani, data_format)\n            worksheet.write(row, 3, dist, data_format)\n            worksheet.write(row, 4, reg, data_format)\n            worksheet.write(row, 5, target, data_format)\n            worksheet.write(row, 6, gap, data_format)\n            row += 1\n        \n        row += 1\n        \n        # Feature adoption\n        worksheet.write(row, 0, 'FEATURE ADOPTION & SATISFACTION', subheader_format)\n        worksheet.write(row, 1, 'Usage %', subheader_format)\n        worksheet.write(row, 2, 'Avg Rating', subheader_format)\n        worksheet.write(row, 3, 'Top Issues', subheader_format)\n        worksheet.write(row, 4, 'Suggestions', subheader_format)\n        worksheet.write(row, 5, 'Priority', subheader_format)\n        worksheet.write(row, 6, 'Action Items', subheader_format)\n        row += 1\n        \n        feature_adoption = [\n            ('Dashboard overview', '', '', '', '', '', ''),\n            ('Price predictions', '', '', '', '', '', ''),\n            ('Regional distribution', '', '', '', '', '', ''),\n            ('Weather correlation', '', '', '', '', '', ''),\n            ('Alert system', '', '', '', '', '', ''),\n            ('Data input', '', '', '', '', '', ''),\n            ('Report generation', '', '', '', '', '', ''),\n        ]\n        \n        for feature, usage, rating, issues, suggestions, priority, actions in feature_adoption:\n            worksheet.write(row, 0, feature, data_format)\n            worksheet.write(row, 1, usage, data_format)\n            worksheet.write(row, 2, rating, data_format)\n            worksheet.write(row, 3, issues, data_format)\n            worksheet.write(row, 4, suggestions, data_format)\n            worksheet.write(row, 5, priority, data_format)\n            worksheet.write(row, 6, actions, data_format)\n            row += 1\n        \n        row += 1\n        \n        # Key insights\n        worksheet.write(row, 0, 'KEY INSIGHTS & RECOMMENDATIONS', subheader_format)\n        worksheet.merge_range(row, 1, row, 6, '', subheader_format)\n        row += 1\n        \n        insights_categories = [\n            'Top 3 Strengths',\n            'Top 3 Weaknesses', \n            'Critical Issues (P0)',\n            'Important Improvements (P1)',\n            'Nice-to-Have Features (P2)',\n            'User Group Differences',\n            'Technical Performance Issues',\n            'Business Impact Potential',\n            'Next Steps & Timeline',\n        ]\n        \n        for category in insights_categories:\n            worksheet.write(row, 0, category, data_format)\n            worksheet.merge_range(row, 1, row, 6, '', data_format)\n            worksheet.set_row(row, 40)\n            row += 1\n    \n    def _create_scoring_guide_sheet(self, workbook, header_format, subheader_format, data_format):\n        \"\"\"Create sheet dengan scoring guide untuk consistency.\"\"\"\n        \n        worksheet = workbook.add_worksheet('Scoring Guide')\n        \n        # Set column widths\n        worksheet.set_column('A:A', 20)\n        worksheet.set_column('B:B', 10)\n        worksheet.set_column('C:C', 40)\n        worksheet.set_column('D:D', 30)\n        \n        row = 0\n        \n        # Title\n        worksheet.merge_range(row, 0, row, 3, 'SCORING GUIDE & DEFINITIONS', header_format)\n        row += 2\n        \n        # Rating scales\n        worksheet.write(row, 0, 'Rating Scale', subheader_format)\n        worksheet.write(row, 1, 'Score', subheader_format)\n        worksheet.write(row, 2, 'Description', subheader_format)\n        worksheet.write(row, 3, 'Criteria', subheader_format)\n        row += 1\n        \n        rating_scale = [\n            ('Usability (1-5)', '5', 'Excellent - Very easy to use', 'Intuitive, no hesitation, quick completion'),\n            ('', '4', 'Good - Easy to use', 'Minor hesitation, mostly smooth'),\n            ('', '3', 'Acceptable - Moderate difficulty', 'Some confusion, requires guidance'),\n            ('', '2', 'Poor - Difficult to use', 'Frequent confusion, multiple errors'),\n            ('', '1', 'Very Poor - Very difficult', 'Cannot complete without significant help'),\n            ('', '', '', ''),\n            ('Task Completion', 'Yes', 'Successfully completed', 'Achieved intended outcome'),\n            ('', 'Partial', 'Partially completed', 'Made progress but did not finish'),\n            ('', 'No', 'Not completed', 'Could not make meaningful progress'),\n            ('', '', '', ''),\n            ('NPS (0-10)', '9-10', 'Promoters', 'Would actively recommend'),\n            ('', '7-8', 'Passives', 'Satisfied but not enthusiastic'),\n            ('', '0-6', 'Detractors', 'Would not recommend'),\n        ]\n        \n        for scale, score, desc, criteria in rating_scale:\n            worksheet.write(row, 0, scale, data_format)\n            worksheet.write(row, 1, score, data_format)\n            worksheet.write(row, 2, desc, data_format)\n            worksheet.write(row, 3, criteria, data_format)\n            row += 1\n        \n        row += 2\n        \n        # Observation guidelines\n        worksheet.write(row, 0, 'OBSERVATION GUIDELINES', subheader_format)\n        worksheet.merge_range(row, 1, row, 3, '', subheader_format)\n        row += 1\n        \n        observation_guidelines = [\n            ('Behavior to Watch', 'What to Note', 'How to Record'),\n            ('Hesitation/Pausing', 'Where user stops or looks confused', 'Page/feature + duration'),\n            ('Error Recovery', 'How user handles mistakes', 'Error type + recovery method'),\n            ('Help Seeking', 'When user asks for assistance', 'Context + question asked'),\n            ('Facial Expressions', 'Frustration, satisfaction, confusion', 'Emotional response + trigger'),\n            ('Verbal Comments', 'Spontaneous feedback during tasks', 'Direct quotes + context'),\n            ('Navigation Patterns', 'How user moves through system', 'Path taken + efficiency'),\n            ('Feature Discovery', 'Unexpected feature usage', 'What they found + reaction'),\n        ]\n        \n        for behavior, note, record in observation_guidelines:\n            worksheet.write(row, 0, behavior, data_format)\n            worksheet.write(row, 1, note, data_format)\n            worksheet.write(row, 2, record, data_format)\n            row += 1\n        \n        row += 2\n        \n        # Success criteria\n        worksheet.write(row, 0, 'SUCCESS CRITERIA', subheader_format)\n        worksheet.merge_range(row, 1, row, 3, '', subheader_format)\n        row += 1\n        \n        success_criteria = [\n            ('Metric', 'Target', 'Measurement Method'),\n            ('Task Completion Rate', '>85%', '(Completed tasks / Total tasks) × 100'),\n            ('Average Rating', '>4.0/5.0', 'Mean of all usability ratings'),\n            ('Net Promoter Score', '>8/10', 'Mean NPS across all participants'),\n            ('Time to Key Tasks', '<specified', 'Stopwatch timing per task'),\n            ('Error Rate', '<5%', '(Critical errors / Total tasks) × 100'),\n            ('Feature Adoption', '>70%', '% participants using core features'),\n            ('Willingness to Pay', '>60%', '% indicating any payment willingness'),\n        ]\n        \n        for metric, target, method in success_criteria:\n            worksheet.write(row, 0, metric, data_format)\n            worksheet.write(row, 1, target, data_format)\n            worksheet.write(row, 2, method, data_format)\n            row += 1\n    \n    def create_google_form_questions(self):\n        \"\"\"Generate question list untuk Google Form creation.\"\"\"\n        \n        questions = {\n            \"Section 1: Basic Information\": [\n                \"Session ID (facilitator will provide)\",\n                \"Your stakeholder type (Petani/Produsen, Distributor/Trader, Regulator/Peneliti)\",\n                \"Location/Province where you work\",\n                \"Your experience level with digital platforms (Pemula, Menengah, Mahir)\"\n            ],\n            \n            \"Section 2: Usability Assessment (1-5 scale: 1=Very Difficult, 5=Very Easy)\": [\n                \"Finding the information you needed\",\n                \"Navigating between different pages\",\n                \"Understanding the menu structure\",\n                \"Speed of page loading\",\n                \"Visual appearance and design\",\n                \"Text clarity and readability\",\n                \"Size of buttons and interactive elements\",\n                \"How well it works on your device (mobile/desktop)\"\n            ],\n            \n            \"Section 3: Feature Usefulness (1-5 scale: 1=Not Useful, 5=Very Useful)\": [\n                \"Dashboard overview of commodity prices\",\n                \"Price prediction charts (7-30 days)\",\n                \"Regional price distribution map\",\n                \"Weather correlation analysis\",\n                \"Alert system for price changes\",\n                \"Data input functionality\",\n                \"Report generation and export\"\n            ],\n            \n            \"Section 4: Task Completion\": [\n                \"Were you able to complete the main task assigned to you? (Yes/Partially/No)\",\n                \"How difficult was the task overall? (1-5 scale)\",\n                \"What was the biggest challenge you faced?\",\n                \"What worked well for you?\"\n            ],\n            \n            \"Section 5: Value Proposition\": [\n                \"How helpful would this platform be for your daily work? (1-5 scale)\",\n                \"What is the biggest benefit you see from this platform?\",\n                \"What improvements are most needed?\",\n                \"Would you be willing to pay for this platform? (Yes/No/Maybe)\",\n                \"If yes, how much per month would be reasonable? (Free only, 25-50k, 50-100k, 100-250k, >250k)\"\n            ],\n            \n            \"Section 6: Overall Satisfaction\": [\n                \"How likely are you to recommend this platform to colleagues? (0-10 scale)\",\n                \"Describe this platform in three words\",\n                \"Any other comments or suggestions?\"\n            ]\n        }\n        \n        # Save to text file\n        output_file = f\"{self.output_dir}/google_form_questions.txt\"\n        \n        with open(output_file, 'w', encoding='utf-8') as f:\n            f.write(\"GOOGLE FORM QUESTIONS - KOMODITAS WATCH USER TESTING\\n\")\n            f.write(\"=\" * 60 + \"\\n\\n\")\n            \n            for section, question_list in questions.items():\n                f.write(f\"{section}\\n\")\n                f.write(\"-\" * len(section) + \"\\n\")\n                \n                for i, question in enumerate(question_list, 1):\n                    f.write(f\"{i}. {question}\\n\")\n                \n                f.write(\"\\n\")\n            \n            f.write(\"\\nNOTES FOR GOOGLE FORM SETUP:\\n\")\n            f.write(\"- Use section breaks between major categories\\n\")\n            f.write(\"- Make rating questions use linear scale (1-5 or 0-10)\\n\")\n            f.write(\"- Use multiple choice for categorical questions\\n\")\n            f.write(\"- Use paragraph text for open-ended responses\\n\")\n            f.write(\"- Set up response validation where appropriate\\n\")\n            f.write(\"- Enable response editing and progress bar\\n\")\n        \n        print(f\"✅ Google Form questions saved: {output_file}\")\n        return output_file\n\ndef main():\n    \"\"\"Generate feedback collection templates.\"\"\"\n    print(\"🔄 Generating user testing feedback collection templates...\")\n    \n    generator = FeedbackTemplateGenerator()\n    \n    # Create Excel template\n    excel_file = generator.create_feedback_template()\n    \n    # Create Google Form questions\n    form_file = generator.create_google_form_questions()\n    \n    print(\"\\n✅ Template generation completed!\")\n    print(f\"📊 Excel Template: {excel_file}\")\n    print(f\"📝 Google Form Questions: {form_file}\")\n    print(\"\\n💡 Next steps:\")\n    print(\"1. Review Excel template dan customize if needed\")\n    print(\"2. Create Google Form using the question list\")\n    print(\"3. Test both collection methods with team\")\n    print(\"4. Choose primary method based on participant preference\")\n\nif __name__ == \"__main__\":\n    main()\n"
