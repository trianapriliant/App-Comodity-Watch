// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  ADMIN
  REGULATOR
  DISTRIBUTOR
  PETANI
  CONSUMER
}

enum CommodityType {
  BERAS
  JAGUNG
  KEDELAI
  GULA_PASIR
  MINYAK_GORENG
  DAGING_SAPI
  DAGING_AYAM
  TELUR_AYAM
  CABAI_MERAH
  BAWANG_MERAH
  BAWANG_PUTIH
  TOMAT
}

enum PriceType {
  KONSUMEN
  PRODUSEN
  WHOLESALE
  RETAIL
}

enum AlertType {
  PRICE_SURGE
  PRICE_DROP
  SUPPLY_SHORTAGE
  WEATHER_ALERT
  MARKET_ANOMALY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
  CUSTOM
}

enum WeatherType {
  TEMPERATURE
  HUMIDITY
  RAINFALL
  WIND_SPEED
  PRESSURE
}

// User management
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  password      String
  fullName      String
  role          UserRole
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  profile       UserProfile?
  dataInputs    DataInput[]
  reports       Report[]
  alertSettings UserAlertSetting[]

  @@map("users")
}

model UserProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  phone       String?
  address     String?
  regionId    String?
  organization String?
  position    String?
  avatar      String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  region Region? @relation(fields: [regionId], references: [id])

  @@map("user_profiles")
}

// Geographic data
model Region {
  id          String  @id @default(uuid())
  name        String
  code        String  @unique
  type        String  // province, city, regency
  parentId    String?
  latitude    Float?
  longitude   Float?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent        Region?       @relation("RegionHierarchy", fields: [parentId], references: [id])
  children      Region[]      @relation("RegionHierarchy")
  prices        Price[]
  weatherData   WeatherData[]
  alerts        Alert[]
  userProfiles  UserProfile[]
  dataInputs    DataInput[]

  @@map("regions")
}

// Commodity management
model Commodity {
  id              String        @id @default(uuid())
  name            String
  type            CommodityType
  code            String        @unique
  unit            String        // kg, ton, liter, etc.
  description     String?
  category        String
  isStrategic     Boolean       @default(false)
  imageUrl        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  prices          Price[]
  predictions     Prediction[]
  alerts          Alert[]
  dataInputs      DataInput[]

  @@map("commodities")
}

// Price data
model Price {
  id           String    @id @default(uuid())
  commodityId  String
  regionId     String
  priceType    PriceType
  price        Decimal   @db.Decimal(12, 2)
  previousPrice Decimal? @db.Decimal(12, 2)
  priceChange  Decimal?  @db.Decimal(8, 4) // percentage change
  currency     String    @default("IDR")
  date         DateTime
  source       String    // BPS, Panel Harga, Manual Input, etc.
  isValidated  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  commodity    Commodity @relation(fields: [commodityId], references: [id])
  region       Region    @relation(fields: [regionId], references: [id])

  @@unique([commodityId, regionId, priceType, date, source])
  @@index([date, commodityId, regionId])
  @@index([commodityId, date])
  @@map("prices")
}

// Weather data
model WeatherData {
  id          String      @id @default(uuid())
  regionId    String
  weatherType WeatherType
  value       Float
  unit        String
  date        DateTime
  source      String      @default("BMKG")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  region      Region      @relation(fields: [regionId], references: [id])

  @@unique([regionId, weatherType, date])
  @@index([date, regionId])
  @@map("weather_data")
}

// ML Predictions
model Prediction {
  id               String    @id @default(uuid())
  commodityId      String
  regionId         String?   // null for national prediction
  predictedPrice   Decimal   @db.Decimal(12, 2)
  currentPrice     Decimal   @db.Decimal(12, 2)
  priceChange      Decimal   @db.Decimal(8, 4)
  confidence       Float     // 0-1
  predictionDate   DateTime  // date being predicted
  modelVersion     String
  algorithm        String    // LSTM, ARIMA, etc.
  features         Json      // features used for prediction
  createdAt        DateTime  @default(now())

  // Relations
  commodity        Commodity @relation(fields: [commodityId], references: [id])

  @@index([predictionDate, commodityId])
  @@map("predictions")
}

// Alert system
model Alert {
  id          String        @id @default(uuid())
  title       String
  message     String
  type        AlertType
  severity    AlertSeverity
  commodityId String?
  regionId    String?
  isActive    Boolean       @default(true)
  isResolved  Boolean       @default(false)
  triggeredAt DateTime      @default(now())
  resolvedAt  DateTime?
  data        Json?         // additional alert data
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  commodity   Commodity?    @relation(fields: [commodityId], references: [id])
  region      Region?       @relation(fields: [regionId], references: [id])

  @@index([isActive, severity])
  @@index([triggeredAt, type])
  @@map("alerts")
}

model UserAlertSetting {
  id          String        @id @default(uuid())
  userId      String
  alertType   AlertType
  isEnabled   Boolean       @default(true)
  commodities Json?         // array of commodity IDs
  regions     Json?         // array of region IDs
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, alertType])
  @@map("user_alert_settings")
}

// Data input and validation
model DataInput {
  id          String    @id @default(uuid())
  userId      String
  commodityId String
  regionId    String
  priceData   Json      // flexible price data structure
  source      String    @default("MANUAL")
  isValidated Boolean   @default(false)
  validatedBy String?
  validatedAt DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  commodity   Commodity @relation(fields: [commodityId], references: [id])
  region      Region    @relation(fields: [regionId], references: [id])

  @@index([createdAt, isValidated])
  @@map("data_inputs")
}

// Reporting system
model Report {
  id          String     @id @default(uuid())
  title       String
  description String?
  type        ReportType
  userId      String
  parameters  Json       // report parameters/filters
  fileUrl     String?    // generated report file
  status      String     @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id])

  @@index([createdAt, type])
  @@map("reports")
}

// System configuration
model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  dataType  String   @default("string") // string, number, boolean, json
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// API usage tracking
model ApiUsage {
  id        String   @id @default(uuid())
  endpoint  String
  method    String
  userId    String?
  ipAddress String
  userAgent String?
  response  Json?
  duration  Int      // response time in ms
  createdAt DateTime @default(now())

  @@index([createdAt, endpoint])
  @@map("api_usage")
}
